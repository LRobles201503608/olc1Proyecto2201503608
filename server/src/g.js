/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var g = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,15],$V1=[1,17],$V2=[1,19],$V3=[1,20],$V4=[1,21],$V5=[1,22],$V6=[1,23],$V7=[1,24],$V8=[2,8,11,26,27,28,29,30,31],$V9=[1,32],$Va=[1,33],$Vb=[14,48],$Vc=[14,19],$Vd=[2,14],$Ve=[1,35],$Vf=[1,51],$Vg=[1,46],$Vh=[1,39],$Vi=[1,40],$Vj=[1,41],$Vk=[1,42],$Vl=[1,43],$Vm=[1,44],$Vn=[1,45],$Vo=[1,48],$Vp=[1,49],$Vq=[14,19,41,42,43,44,45,46,48,49,50,52,53,54,55,56,57,86],$Vr=[19,48],$Vs=[2,64],$Vt=[1,55],$Vu=[1,58],$Vv=[1,59],$Vw=[1,60],$Vx=[1,61],$Vy=[1,62],$Vz=[1,63],$VA=[1,64],$VB=[1,65],$VC=[1,66],$VD=[1,67],$VE=[1,68],$VF=[1,69],$VG=[1,70],$VH=[1,71],$VI=[1,77],$VJ=[14,19,41,43,44,45,46,48,49,50,52,53,54,57,86],$VK=[14,19,48,86],$VL=[14,19,41,43,44,48,49,50,52,53,54,57,86],$VM=[14,19,48,49,50,52,57,86],$VN=[14,19,48,49,50,52,53,54,57,86],$VO=[1,108],$VP=[1,104],$VQ=[1,105],$VR=[1,116],$VS=[1,117],$VT=[1,118],$VU=[1,119],$VV=[1,120],$VW=[1,114],$VX=[1,115],$VY=[2,8,11,26,27,28,29,30,31,64,65,73,75,76,77,82,85,87,88,89],$VZ=[1,134],$V_=[2,28],$V$=[2,8,11,26,27,28,29,30,31,64,65,73,75,76,77,80,82,85,87,88,89],$V01=[1,163],$V11=[1,167],$V21=[1,168],$V31=[11,85,87];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"s":3,"inicio":4,"EOF":5,"clase":6,"RCLASS":7,"IDENTIFICADOR":8,"LLA":9,"l_ins":10,"LLC":11,"ins":12,"variable":13,"PYCOMA":14,"metodos_funciones":15,"declaracion":16,"asignacion":17,"ldeclaracion":18,"COMA":19,"id2":20,"id":21,"tipo":22,"IGUAL":23,"expresion":24,"actualizar":25,"RINT":26,"RCHAR":27,"RBOOLEAN":28,"RDOUBLE":29,"RSTRING":30,"VOID":31,"INCREMENTO":32,"DECREMENTO":33,"MENOS":34,"ENTERO":35,"CHAR":36,"TRUE":37,"FALSE":38,"DECIMAL":39,"CADENA":40,"MAS":41,"menos":42,"POR":43,"DIVIDIDO":44,"POT":45,"MOD":46,"PARENTA":47,"PARENTC":48,"AND":49,"OR":50,"NOT":51,"DIF":52,"MAYIGU":53,"MENIGU":54,"MAY":55,"MEN":56,"IG":57,"llamada_metodo":58,"parametros":59,"instrucciones_funciones":60,"definicion_parametros":61,"instru_f":62,"sentencias":63,"BREAK":64,"CONTINUE":65,"retorno":66,"imprimir":67,"sentenciafor":68,"sentenciawhile":69,"sentenciadowhile":70,"sentenciaif":71,"sentenciaswitch":72,"FOR":73,"cuerposentencia":74,"WHILE":75,"DO":76,"IF":77,"selse":78,"selseif":79,"ELSE":80,"sinosi":81,"SWITCH":82,"listacase":83,"cases":84,"CASE":85,"DOSP":86,"DEFAULT":87,"RETURN":88,"PRINT":89,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"RCLASS",8:"IDENTIFICADOR",9:"LLA",11:"LLC",14:"PYCOMA",19:"COMA",23:"IGUAL",26:"RINT",27:"RCHAR",28:"RBOOLEAN",29:"RDOUBLE",30:"RSTRING",31:"VOID",32:"INCREMENTO",33:"DECREMENTO",34:"MENOS",35:"ENTERO",36:"CHAR",37:"TRUE",38:"FALSE",39:"DECIMAL",40:"CADENA",41:"MAS",42:"menos",43:"POR",44:"DIVIDIDO",45:"POT",46:"MOD",47:"PARENTA",48:"PARENTC",49:"AND",50:"OR",51:"NOT",52:"DIF",53:"MAYIGU",54:"MENIGU",55:"MAY",56:"MEN",57:"IG",64:"BREAK",65:"CONTINUE",73:"FOR",75:"WHILE",76:"DO",77:"IF",80:"ELSE",82:"SWITCH",85:"CASE",86:"DOSP",87:"DEFAULT",88:"RETURN",89:"PRINT"},
productions_: [0,[3,2],[4,1],[6,5],[10,2],[10,1],[12,2],[12,1],[13,1],[13,1],[16,1],[18,3],[18,1],[21,4],[21,2],[20,3],[20,1],[17,3],[17,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[25,2],[25,2],[25,1],[24,2],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,2],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,1],[24,1],[58,4],[58,1],[15,8],[15,7],[15,1],[59,3],[59,1],[61,2],[61,0],[61,1],[60,2],[60,1],[62,2],[62,1],[62,2],[62,2],[62,2],[62,2],[62,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[68,9],[69,5],[70,6],[71,5],[71,6],[71,6],[71,7],[78,2],[79,2],[79,1],[81,6],[72,7],[83,2],[83,1],[84,4],[84,3],[84,3],[84,2],[74,3],[74,2],[66,2],[67,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        return $$[$0-1];
        
break;
case 2:

		this.$ = API.astArchivo ($$[$0]);
	
break;
case 3:
this.$ = API.astClase($$[$0-3] , $$[$0-1]) ;
break;
case 4: case 66:
$$[$0-1].push($$[$0]);  this.$ = $$[$0-1];
break;
case 5: case 67:
this.$ = [$$[$0]];
break;
case 6: case 44: case 68: case 72: case 73: case 99:
this.$=$$[$0-1];
break;
case 7: case 8: case 9: case 10: case 18: case 37: case 54: case 69: case 75: case 76: case 77: case 78: case 79:
this.$=$$[$0];
break;
case 11: case 61:
$$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 12:
this.$ = API.astListaDecla($$[$0]);
break;
case 13:
 this.$ = API.astDeclaracion( $$[$0-3] , $$[$0-2] , $$[$0] ); 
break;
case 14:
this.$ = API.astDeclaNoVal($$[$0-1],[$$[$0]]);
break;
case 15: case 17:
this.$ = API.astAsignacion($$[$0-2],$$[$0])
break;
case 16:
this.$ = API.astIden($$[$0]);
break;
case 19:
this.$ = API.astTipo(TIPO.ENTERO)
break;
case 20:
this.$ = API.astTipo(TIPO.CARACTER)
break;
case 21:
this.$ = API.astTipo(TIPO.BOOLEANO)
break;
case 22:
this.$ = API.astTipo(TIPO.DOUBLE)
break;
case 23:
this.$ = API.astTipo(TIPO.STRING)
break;
case 24:
this.$ = API.astTipo(TIPO.VOID)
break;
case 25: case 28: case 55: case 57: case 60: case 65: case 74: case 80:
this.$ = LERRORES.astErroresS(RECOPILACION_ERRORES.astErrorS($$[$0] , _$[$0].first_line, _$[$0].first_column, "Sintactico")); LERRORES.astPrintS(this.$);
break;
case 26: case 27:
this.$=astIncreDecre($$[$0-1],$$[$0]);
break;
case 29:
this.$ = API.expresionU($$[$0], OPERACION.NEGATIVO);
break;
case 30:
this.$ = API.nuevoValor(Number($$[$0]), TIPO.ENTERO);
break;
case 31:
this.$ = API.nuevoValor($$[$0], TIPO.CARACTER);
break;
case 32: case 33:
this.$ = API.nuevoValor($$[$0], TIPO.BOOLEANO);
break;
case 34:
this.$ = API.nuevoValor(Number($$[$0]), TIPO.DOUBLE);
break;
case 35:
this.$ = API.nuevoValor($$[$0], TIPO.STRING);
break;
case 36:
this.$ = API.nuevoValor($$[$0], TIPO.IDENTIFICADOR);
break;
case 38:
this.$ = API.expresion($$[$0-2], $$[$0], OPERACION.SUMA);
break;
case 39:
this.$ = API.expresion($$[$0-2], $$[$0], OPERACION.RESTA);
break;
case 40:
this.$ = API.expresion($$[$0-2], $$[$0], OPERACION.MULTIPLICACION);
break;
case 41:
this.$ = API.expresion($$[$0-2], $$[$0], OPERACION.DIVISION);
break;
case 42:
this.$ = API.expresion($$[$0-2], $$[$0], OPERACION.POTENCIA);
break;
case 43:
this.$ = API.expresion($$[$0-2], $$[$0], OPERACION.MODULO);
break;
case 45:
this.$ = API.expresion($$[$0-2], $$[$0], OPERACION.AND);
break;
case 46:
this.$ = API.expresion($$[$0-2], $$[$0], OPERACION.OR);
break;
case 47:
this.$ = API.expresionU($$[$0], OPERACION.NOT);
break;
case 48:
this.$ = API.expresion($$[$0-2], $$[$0], OPERACION.NO_IGUAL);
break;
case 49:
this.$ = API.expresion($$[$0-2], $$[$0], OPERACION.MAYOR_IGUAL);
break;
case 50:
this.$ = API.expresion($$[$0-2], $$[$0], OPERACION.MENOR_IGUAL);
break;
case 51:
this.$ = API.expresion($$[$0-2], $$[$0], OPERACION.MAYOR);
break;
case 52:
this.$ = API.expresion($$[$0-2], $$[$0], OPERACION.MENOR);
break;
case 53:
this.$ = API.expresion($$[$0-2], $$[$0], OPERACION.IGUAL_IGUAL);
break;
case 56:
this.$ = API.astLlamadaM($$[$0-3] , $$[$0-1]);
break;
case 58:
this.$ = API.astFuncion($$[$0-7] , $$[$0-6], $$[$0-4], $$[$0-1]);
break;
case 59:
this.$ = API.astFuncion($$[$0-6] , $$[$0-5], $$[$0-3], "vacio");
break;
case 62:
this.$ = API.astListaP($$[$0]);
break;
case 63:
this.$=API.astParametro( $$[$0-1] , $$[$0]);
break;
case 64:
 
break;
case 70:
this.$ = API.astBreak($$[$0-1]);
break;
case 71:
this.$ = API.astContinue($$[$0-1]);
break;
case 81:
this.$=API.astFor($$[$0-6],$$[$0-4],$$[$0-2],$$[$0]);
break;
case 82:
this.$=API.astWhile($$[$0-2],$$[$0]);
break;
case 83:
this.$=API.astDoWhile($$[$0-1],$$[$0-4]);
break;
case 84:
this.$ = API.astIf($$[$0-2], $$[$0]);
break;
case 85:
this.$=API.astElseC(API.astIf($$[$0-3], $$[$0-1]),$$[$0]);
break;
case 86:
this.$ = API.astElseifC(API.astIf($$[$0-3], $$[$0-1]) , $$[$0]);
break;
case 87:
this.$ = API.astIfCompleto(API.astIf($$[$0-4], $$[$0-2]) , $$[$0-1], $$[$0]);
break;
case 88:
this.$ = API.astElse($$[$0]);
break;
case 89:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 90:
this.$ = API.astelif($$[$0]);
break;
case 91:
this.$ = API.astElseif( $$[$0-2], $$[$0]);
break;
case 92:
this.$ = API.astSwitch($$[$0-4],$$[$0-1]);
break;
case 93:
$$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 94:
this.$ = API.astCases($$[$0]);
break;
case 95:
 this.$ = API.astCase($$[$0-2],$$[$0]);
break;
case 96:
 this.$ = API.astCase($$[$0-1],"/");
break;
case 97:
this.$ = API.astDefault($$[$0]);
break;
case 98:
this.$ = API.astDefault("/");
break;
case 100:
this.$="/"
break;
case 101:
this.$ = API.astReturn(TIPO.ENTERO , $$[$0]);
break;
case 102:
this.$=API.astConsoleWrite($$[$0-1]);
break;
}
},
table: [{3:1,4:2,6:3,7:[1,4]},{1:[3]},{5:[1,5]},{5:[2,2]},{8:[1,6]},{1:[2,1]},{9:[1,7]},{2:$V0,8:$V1,10:8,12:9,13:10,15:11,16:12,17:13,18:16,21:25,22:14,25:18,26:$V2,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7},{2:$V0,8:$V1,11:[1,26],12:27,13:10,15:11,16:12,17:13,18:16,21:25,22:14,25:18,26:$V2,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7},o($V8,[2,5]),{14:[1,28]},o($V8,[2,7]),{14:[2,8]},{14:[2,9]},{8:[1,29]},o([2,8,11,14,26,27,28,29,30,31],[2,60]),{14:[2,10],19:[1,30]},{23:[1,31],32:$V9,33:$Va},o($Vb,[2,18]),{8:[2,19]},{8:[2,20]},{8:[2,21]},{8:[2,22]},{8:[2,23]},{8:[2,24]},o($Vc,[2,12]),{5:[2,3]},o($V8,[2,4]),o($V8,[2,6]),o($Vc,$Vd,{23:$Ve,47:[1,34]}),{8:[1,37],20:36},{2:$Vf,8:$Vg,24:38,25:47,34:$Vh,35:$Vi,36:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,47:$Vo,51:$Vp,58:50},o($Vq,[2,26]),o($Vq,[2,27]),o($Vr,$Vs,{59:52,61:53,22:54,2:$Vt,26:$V2,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7}),{2:$Vf,8:$Vg,24:56,25:47,34:$Vh,35:$Vi,36:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,47:$Vo,51:$Vp,58:50},o($Vc,[2,11]),o($Vc,[2,16],{23:[1,57]}),o($Vb,[2,17],{41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,49:$VA,50:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH}),{2:$Vf,8:$Vg,24:72,25:47,34:$Vh,35:$Vi,36:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,47:$Vo,51:$Vp,58:50},o($Vq,[2,30]),o($Vq,[2,31]),o($Vq,[2,32]),o($Vq,[2,33]),o($Vq,[2,34]),o($Vq,[2,35]),o($Vq,[2,36],{32:$V9,33:$Va,47:[1,73]}),o($Vq,[2,37]),{2:$Vf,8:$Vg,24:74,25:47,34:$Vh,35:$Vi,36:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,47:$Vo,51:$Vp,58:50},{2:$Vf,8:$Vg,24:75,25:47,34:$Vh,35:$Vi,36:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,47:$Vo,51:$Vp,58:50},o($Vq,[2,54]),o($Vq,[2,55]),{19:$VI,48:[1,76]},o($Vr,[2,62]),{8:[1,78]},o([8,19,48],[2,65]),o($Vc,[2,13],{41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,49:$VA,50:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH}),{2:$Vf,8:$Vg,24:79,25:47,34:$Vh,35:$Vi,36:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,47:$Vo,51:$Vp,58:50},{2:$Vf,8:$Vg,24:80,25:47,34:$Vh,35:$Vi,36:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,47:$Vo,51:$Vp,58:50},{2:$Vf,8:$Vg,24:81,25:47,34:$Vh,35:$Vi,36:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,47:$Vo,51:$Vp,58:50},{2:$Vf,8:$Vg,24:82,25:47,34:$Vh,35:$Vi,36:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,47:$Vo,51:$Vp,58:50},{2:$Vf,8:$Vg,24:83,25:47,34:$Vh,35:$Vi,36:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,47:$Vo,51:$Vp,58:50},{2:$Vf,8:$Vg,24:84,25:47,34:$Vh,35:$Vi,36:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,47:$Vo,51:$Vp,58:50},{2:$Vf,8:$Vg,24:85,25:47,34:$Vh,35:$Vi,36:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,47:$Vo,51:$Vp,58:50},{2:$Vf,8:$Vg,24:86,25:47,34:$Vh,35:$Vi,36:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,47:$Vo,51:$Vp,58:50},{2:$Vf,8:$Vg,24:87,25:47,34:$Vh,35:$Vi,36:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,47:$Vo,51:$Vp,58:50},{2:$Vf,8:$Vg,24:88,25:47,34:$Vh,35:$Vi,36:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,47:$Vo,51:$Vp,58:50},{2:$Vf,8:$Vg,24:89,25:47,34:$Vh,35:$Vi,36:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,47:$Vo,51:$Vp,58:50},{2:$Vf,8:$Vg,24:90,25:47,34:$Vh,35:$Vi,36:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,47:$Vo,51:$Vp,58:50},{2:$Vf,8:$Vg,24:91,25:47,34:$Vh,35:$Vi,36:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,47:$Vo,51:$Vp,58:50},{2:$Vf,8:$Vg,24:92,25:47,34:$Vh,35:$Vi,36:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,47:$Vo,51:$Vp,58:50},{2:$Vf,8:$Vg,24:93,25:47,34:$Vh,35:$Vi,36:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,47:$Vo,51:$Vp,58:50},o($VJ,[2,29],{42:$Vv,55:$VF,56:$VG}),o($Vr,$Vs,{61:53,22:54,59:94,2:$Vt,26:$V2,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7}),{41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,48:[1,95],49:$VA,50:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH},o($VJ,[2,47],{42:$Vv,55:$VF,56:$VG}),{9:[1,96]},o($Vr,$Vs,{22:54,61:97,2:$Vt,26:$V2,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7}),o($Vr,[2,63]),o($Vc,[2,15],{41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,49:$VA,50:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH}),o([14,19,41,48,49,50,52,53,54,57,86],[2,38],{42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,55:$VF,56:$VG}),o($VK,[2,39],{41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,49:$VA,50:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH}),o($VL,[2,40],{42:$Vv,45:$Vy,46:$Vz,55:$VF,56:$VG}),o($VL,[2,41],{42:$Vv,45:$Vy,46:$Vz,55:$VF,56:$VG}),o($VJ,[2,42],{42:$Vv,55:$VF,56:$VG}),o($VJ,[2,43],{42:$Vv,55:$VF,56:$VG}),o([14,19,48,49,50,86],[2,45],{41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH}),o([14,19,48,50,86],[2,46],{41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,49:$VA,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH}),o($VM,[2,48],{41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,53:$VD,54:$VE,55:$VF,56:$VG}),o($VN,[2,49],{41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,55:$VF,56:$VG}),o($VN,[2,50],{41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,55:$VF,56:$VG}),o($VK,[2,51],{41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,49:$VA,50:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH}),o($VK,[2,52],{41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,49:$VA,50:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH}),o($VM,[2,53],{41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,53:$VD,54:$VE,55:$VF,56:$VG}),{19:$VI,48:[1,98]},o($Vq,[2,44]),{2:$VO,8:$V1,11:[1,100],13:102,16:12,17:13,18:16,21:25,22:121,25:18,26:$V2,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7,60:99,62:101,63:103,64:$VP,65:$VQ,66:106,67:107,68:109,69:110,70:111,71:112,72:113,73:$VR,75:$VS,76:$VT,77:$VU,82:$VV,88:$VW,89:$VX},o($Vr,[2,61]),o($Vq,[2,56]),{2:$VO,8:$V1,11:[1,122],13:102,16:12,17:13,18:16,21:25,22:121,25:18,26:$V2,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7,62:123,63:103,64:$VP,65:$VQ,66:106,67:107,68:109,69:110,70:111,71:112,72:113,73:$VR,75:$VS,76:$VT,77:$VU,82:$VV,88:$VW,89:$VX},o($V8,[2,59]),o($VY,[2,67]),{14:[1,124]},o($VY,[2,69]),{14:[1,125]},{14:[1,126]},{14:[1,127]},{14:[1,128]},o([2,8,11,14,26,27,28,29,30,31,64,65,73,75,76,77,82,85,87,88,89],[2,74]),o($VY,[2,75]),o($VY,[2,76]),o($VY,[2,77]),o($VY,[2,78]),o($VY,[2,79]),{2:$Vf,8:$Vg,24:129,25:47,34:$Vh,35:$Vi,36:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,47:$Vo,51:$Vp,58:50},{47:[1,130]},{47:[1,131]},{47:[1,132]},{9:$VZ,74:133},{47:[1,135]},{47:[1,136]},{8:[1,137]},o($V8,[2,58]),o($VY,[2,66]),o($VY,[2,68]),o($VY,[2,70]),o($VY,[2,71]),o($VY,[2,72]),o($VY,[2,73]),{14:[2,101],41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,49:$VA,50:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH},{40:[1,138]},{2:[1,140],8:$V1,13:139,16:12,17:13,18:16,21:25,22:121,25:18,26:$V2,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7},{2:$Vf,8:$Vg,24:141,25:47,34:$Vh,35:$Vi,36:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,47:$Vo,51:$Vp,58:50},{75:[1,142]},{2:$VO,8:$V1,11:[1,144],13:102,16:12,17:13,18:16,21:25,22:121,25:18,26:$V2,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7,60:143,62:101,63:103,64:$VP,65:$VQ,66:106,67:107,68:109,69:110,70:111,71:112,72:113,73:$VR,75:$VS,76:$VT,77:$VU,82:$VV,88:$VW,89:$VX},{2:$Vf,8:$Vg,24:145,25:47,34:$Vh,35:$Vi,36:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,47:$Vo,51:$Vp,58:50},{2:$Vf,8:$Vg,24:146,25:47,34:$Vh,35:$Vi,36:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,47:$Vo,51:$Vp,58:50},o($Vc,$Vd,{23:$Ve}),{48:[1,147]},{14:[1,148]},o([8,14],$V_),{41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,48:[1,149],49:$VA,50:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH},{47:[1,150]},{2:$VO,8:$V1,11:[1,151],13:102,16:12,17:13,18:16,21:25,22:121,25:18,26:$V2,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7,62:123,63:103,64:$VP,65:$VQ,66:106,67:107,68:109,69:110,70:111,71:112,72:113,73:$VR,75:$VS,76:$VT,77:$VU,82:$VV,88:$VW,89:$VX},o($V$,[2,100]),{41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,48:[1,152],49:$VA,50:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH},{41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,48:[1,153],49:$VA,50:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH},{14:[2,102]},{2:$Vf,8:$Vg,24:154,25:47,34:$Vh,35:$Vi,36:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,47:$Vo,51:$Vp,58:50},{9:$VZ,74:155},{2:$Vf,8:$Vg,24:156,25:47,34:$Vh,35:$Vi,36:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,47:$Vo,51:$Vp,58:50},o($V$,[2,99]),{9:$VZ,74:157},{9:[1,158]},{14:[1,159],41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,49:$VA,50:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH},o($VY,[2,82]),{41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,48:[1,160],49:$VA,50:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH},o($VY,[2,84],{78:161,79:162,81:164,80:$V01}),{83:165,84:166,85:$V11,87:$V21},{2:[1,170],8:$V1,17:169,25:18},o($VY,[2,83]),o($VY,[2,85]),o($VY,[2,86],{78:171,81:172,80:$V01}),{9:$VZ,74:173,77:[1,174]},o($V$,[2,90]),{11:[1,175],84:176,85:$V11,87:$V21},o($V31,[2,94]),{2:$Vf,8:$Vg,24:177,25:47,34:$Vh,35:$Vi,36:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,47:$Vo,51:$Vp,58:50},{86:[1,178]},{48:[1,179]},{48:$V_},o($VY,[2,87]),o($V$,[2,89]),o($VY,[2,88]),{47:[1,180]},o($VY,[2,92]),o($V31,[2,93]),{41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,49:$VA,50:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,86:[1,181]},o($V31,[2,98],{16:12,17:13,18:16,25:18,21:25,62:101,13:102,63:103,66:106,67:107,68:109,69:110,70:111,71:112,72:113,22:121,60:182,2:$VO,8:$V1,26:$V2,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7,64:$VP,65:$VQ,73:$VR,75:$VS,76:$VT,77:$VU,82:$VV,88:$VW,89:$VX}),{9:$VZ,74:183},{2:$Vf,8:$Vg,24:184,25:47,34:$Vh,35:$Vi,36:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,47:$Vo,51:$Vp,58:50},o($V31,[2,96],{16:12,17:13,18:16,25:18,21:25,62:101,13:102,63:103,66:106,67:107,68:109,69:110,70:111,71:112,72:113,22:121,60:185,2:$VO,8:$V1,26:$V2,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7,64:$VP,65:$VQ,73:$VR,75:$VS,76:$VT,77:$VU,82:$VV,88:$VW,89:$VX}),o($V31,[2,97],{16:12,17:13,18:16,25:18,21:25,13:102,63:103,66:106,67:107,68:109,69:110,70:111,71:112,72:113,22:121,62:123,2:$VO,8:$V1,26:$V2,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7,64:$VP,65:$VQ,73:$VR,75:$VS,76:$VT,77:$VU,82:$VV,88:$VW,89:$VX}),o($VY,[2,81]),{41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,48:[1,186],49:$VA,50:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH},o($V31,[2,95],{16:12,17:13,18:16,25:18,21:25,13:102,63:103,66:106,67:107,68:109,69:110,70:111,71:112,72:113,22:121,62:123,2:$VO,8:$V1,26:$V2,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7,64:$VP,65:$VQ,73:$VR,75:$VS,76:$VT,77:$VU,82:$VV,88:$VW,89:$VX}),{9:$VZ,74:187},o($V$,[2,91])],
defaultActions: {3:[2,2],5:[2,1],12:[2,8],13:[2,9],19:[2,19],20:[2,20],21:[2,21],22:[2,22],23:[2,23],24:[2,24],26:[2,3],147:[2,102],170:[2,28]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	const OPERACION	= require('./ast').OPERACION;
	const TIPO 		= require('./ast').TIPO;
	const API	= require('./ast').API;
	const LERRORES	= require('./ast').LERRORES;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
	const LERRORES	= require('./ast').LERRORES;

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 30;
break;
case 4:return 26;
break;
case 5:return 29;
break;
case 6:return 28;
break;
case 7:return 27;
break;
case 8:return 76;
break;
case 9:return 75;
break;
case 10:return 77;
break;
case 11:return 80;
break;
case 12:return 73;
break;
case 13:return 82;
break;
case 14:return 85;
break;
case 15:return 87;
break;
case 16:return 64;
break;
case 17:return 65;
break;
case 18:return 88;
break;
case 19:return 31;
break;
case 20:return 37;
break;
case 21:return 38;
break;
case 22:return 89;
break;
case 23:return 7
break;
case 24:return 86;
break;
case 25:return 14;
break;
case 26:return 9;
break;
case 27:return 11;
break;
case 28:return 47;
break;
case 29:return 48;
break;
case 30:return 19;
break;
case 31:return 49
break;
case 32:return 50;
break;
case 33:return 51;
break;
case 34:return 32;
break;
case 35:return 33;
break;
case 36:return 41;
break;
case 37:return 34;
break;
case 38:return 43;
break;
case 39:return 44;
break;
case 40:return 45;
break;
case 41:return 46;
break;
case 42:return 54;
break;
case 43:return 53;
break;
case 44:return 57;
break;
case 45:return 52;
break;
case 46:return 56;
break;
case 47:return 55;
break;
case 48:return 23;
break;
case 49: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 40; 
break;
case 50:return 39;
break;
case 51:return 35;
break;
case 52:return 36;
break;
case 53:return 8;
break;
case 54:return 5;
break;
case 55: $$ = LERRORES.astErrores(LERRORES.astError(yy_.yytext , yy_.yylloc.first_line , yy_.yylloc.first_column, "Lexico")); LERRORES.astPrint($$);
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/,/^(?:String\b)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:boolean\b)/,/^(?:char\b)/,/^(?:do\b)/,/^(?:while\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:for\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:void\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:Console\.Write\b)/,/^(?:class\b)/,/^(?::)/,/^(?:;)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:,)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\^)/,/^(?:%)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:!=)/,/^(?:<)/,/^(?:>)/,/^(?:=)/,/^(?:"[^\"]*")/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:[0-9]+\b)/,/^(?:'[a-zA-Z]')/,/^(?:(_?[a-zA-Z])[a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = g;
exports.Parser = g.Parser;
exports.parse = function () { return g.parse.apply(g, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
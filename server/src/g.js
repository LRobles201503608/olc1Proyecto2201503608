/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var g = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,24],$V1=[1,16],$V2=[1,18],$V3=[1,19],$V4=[1,20],$V5=[1,21],$V6=[1,22],$V7=[1,23],$V8=[2,8,11,26,27,28,29,30,31],$V9=[1,32],$Va=[1,33],$Vb=[14,47],$Vc=[14,19],$Vd=[2,14],$Ve=[1,35],$Vf=[1,52],$Vg=[1,46],$Vh=[1,39],$Vi=[1,40],$Vj=[1,41],$Vk=[1,42],$Vl=[1,43],$Vm=[1,44],$Vn=[1,45],$Vo=[1,48],$Vp=[1,49],$Vq=[1,51],$Vr=[14,19,34,41,42,43,44,45,47,48,49,51,52,53,54,55,56,86],$Vs=[1,58],$Vt=[1,62],$Vu=[1,61],$Vv=[1,63],$Vw=[1,64],$Vx=[1,65],$Vy=[1,66],$Vz=[1,67],$VA=[1,68],$VB=[1,69],$VC=[1,70],$VD=[1,71],$VE=[1,72],$VF=[1,73],$VG=[1,74],$VH=[2,55],$VI=[1,80],$VJ=[19,47],$VK=[14,19,34,41,42,43,44,45,47,48,49,51,52,53,56,86],$VL=[1,111],$VM=[1,107],$VN=[1,108],$VO=[1,119],$VP=[1,120],$VQ=[1,121],$VR=[1,122],$VS=[1,123],$VT=[1,117],$VU=[1,118],$VV=[14,19,34,41,47,48,49,51,52,53,56,86],$VW=[14,19,34,41,42,43,47,48,49,51,52,53,56,86],$VX=[14,19,47,48,49,51,56,86],$VY=[14,19,47,48,49,51,52,53,56,86],$VZ=[14,19,47,86],$V_=[2,8,11,26,27,28,29,30,31,64,65,73,75,76,77,82,85,87,88,89],$V$=[1,140],$V01=[2,8,11,26,27,28,29,30,31,64,65,73,75,76,77,80,82,85,87,88,89],$V11=[1,171],$V21=[1,175],$V31=[1,176],$V41=[11,85,87];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"s":3,"inicio":4,"EOF":5,"clase":6,"RCLASS":7,"IDENTIFICADOR":8,"LLA":9,"l_ins":10,"LLC":11,"ins":12,"variable":13,"PYCOMA":14,"metodos_funciones":15,"declaracion":16,"asignacion":17,"ldeclaracion":18,"COMA":19,"id2":20,"id":21,"tipo":22,"IGUAL":23,"expresion":24,"actualizar":25,"RINT":26,"RCHAR":27,"RBOOLEAN":28,"RDOUBLE":29,"RSTRING":30,"VOID":31,"INCREMENTO":32,"DECREMENTO":33,"MENOS":34,"ENTERO":35,"CHAR":36,"TRUE":37,"FALSE":38,"DECIMAL":39,"CADENA":40,"MAS":41,"POR":42,"DIVIDIDO":43,"POT":44,"MOD":45,"PARENTA":46,"PARENTC":47,"AND":48,"OR":49,"NOT":50,"DIF":51,"MAYIGU":52,"MENIGU":53,"MAY":54,"MEN":55,"IG":56,"llamada_metodo":57,"CADENAH":58,"parametros":59,"instrucciones_funciones":60,"definicion_parametros":61,"instru_f":62,"sentencias":63,"BREAK":64,"CONTINUE":65,"retorno":66,"imprimir":67,"sentenciafor":68,"sentenciawhile":69,"sentenciadowhile":70,"sentenciaif":71,"sentenciaswitch":72,"FOR":73,"cuerposentencia":74,"WHILE":75,"DO":76,"IF":77,"selse":78,"selseif":79,"ELSE":80,"sinosi":81,"SWITCH":82,"listacase":83,"cases":84,"CASE":85,"DOSP":86,"DEFAULT":87,"RETURN":88,"PRINT":89,"panico":90,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"RCLASS",8:"IDENTIFICADOR",9:"LLA",11:"LLC",14:"PYCOMA",19:"COMA",23:"IGUAL",26:"RINT",27:"RCHAR",28:"RBOOLEAN",29:"RDOUBLE",30:"RSTRING",31:"VOID",32:"INCREMENTO",33:"DECREMENTO",34:"MENOS",35:"ENTERO",36:"CHAR",37:"TRUE",38:"FALSE",39:"DECIMAL",40:"CADENA",41:"MAS",42:"POR",43:"DIVIDIDO",44:"POT",45:"MOD",46:"PARENTA",47:"PARENTC",48:"AND",49:"OR",50:"NOT",51:"DIF",52:"MAYIGU",53:"MENIGU",54:"MAY",55:"MEN",56:"IG",58:"CADENAH",64:"BREAK",65:"CONTINUE",73:"FOR",75:"WHILE",76:"DO",77:"IF",80:"ELSE",82:"SWITCH",85:"CASE",86:"DOSP",87:"DEFAULT",88:"RETURN",89:"PRINT"},
productions_: [0,[3,2],[4,1],[6,5],[10,2],[10,1],[12,2],[12,1],[13,1],[13,1],[16,1],[18,3],[18,1],[21,4],[21,2],[20,3],[20,1],[17,3],[17,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[25,2],[25,2],[25,1],[24,2],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,2],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,1],[24,1],[24,1],[57,4],[57,1],[15,8],[15,7],[15,7],[15,6],[59,3],[59,1],[61,2],[61,1],[61,1],[60,2],[60,1],[62,2],[62,1],[62,2],[62,2],[62,2],[62,2],[62,1],[63,1],[63,1],[63,1],[63,1],[63,1],[68,9],[69,5],[70,7],[71,5],[71,6],[71,6],[71,7],[78,2],[79,2],[79,1],[81,6],[72,7],[83,2],[83,1],[84,4],[84,3],[84,3],[84,2],[74,3],[74,2],[66,2],[66,1],[67,4],[67,4],[90,1],[90,1],[90,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        return $$[$0-1];
        
break;
case 2:

		this.$ = API.astArchivo ($$[$0],tr,imprimir);
	
break;
case 3:
this.$ = API.astClase($$[$0-3] , $$[$0-1]) ;
break;
case 4: case 68:
$$[$0-1].push($$[$0]);  this.$ = $$[$0-1];
break;
case 5: case 69:
this.$ = [$$[$0]];
break;
case 6:
this.$=$$[$0-1]; tr+=";";
break;
case 7: case 8: case 9: case 10: case 18: case 37: case 54: case 71: case 77: case 78: case 79: case 80: case 81:
this.$=$$[$0];
break;
case 11:
$$[$0-2].push($$[$0]); this.$ = $$[$0-2]; tr+=",";
break;
case 12:
this.$ = API.astListaDecla($$[$0]);
break;
case 13:
this.$ = LVARIABLES.astVariables(LVARIABLES.astVariabless(tipov , _$[$0-3].first_line, $$[$0-2], $$[$0])); LVARIABLES.astPrintS(this.$); this.$ = API.astDeclaracion( $$[$0-3] , $$[$0-2] , $$[$0] ); tr+=" var "+$$[$0-2]+"= "+$$[$0];
break;
case 14:
this.$ = LVARIABLES.astVariables(LVARIABLES.astVariabless(tipov , _$[$0-1].first_line, $$[$0], "SIN VALOR")); LVARIABLES.astPrintS(this.$); this.$ = API.astDeclaNoVal($$[$0-1],[$$[$0]]); tr+=" var "+$$[$0];
break;
case 15:
this.$ = LVARIABLES.astVariables(LVARIABLES.astVariabless(tipov , _$[$0-2].first_line, $$[$0-2], $$[$0])); LVARIABLES.astPrintS(this.$);this.$ = API.astAsignacion($$[$0-2],$$[$0]); tr+=$$[$0-2]+" = ";
break;
case 16:
this.$ = LVARIABLES.astVariables(LVARIABLES.astVariabless(tipov , _$[$0].first_line, $$[$0], "SIN VALOR")); LVARIABLES.astPrintS(this.$);this.$ = API.astIden($$[$0]); tr+=$$[$0]
break;
case 17:
this.$ = API.astAsignacion($$[$0-2],$$[$0]);tr+=$$[$0-2]+"=";
break;
case 19:
this.$ = API.astTipo(TIPO.ENTERO); tipov="int";
break;
case 20:
this.$ = API.astTipo(TIPO.CARACTER);tipov="char";
break;
case 21:
this.$ = API.astTipo(TIPO.BOOLEANO);tipov="bool";
break;
case 22:
this.$ = API.astTipo(TIPO.DOUBLE);tipov="double";
break;
case 23:
this.$ = API.astTipo(TIPO.STRING);tipov="string";
break;
case 24:
this.$ = API.astTipo(TIPO.VOID)
break;
case 25: case 108:
this.$ = LERRORES.astErroresS(LERRORES.astErrorS($$[$0] , _$[$0].first_line, _$[$0].first_column, "Sintactico")); LERRORES.astPrintS(this.$);
break;
case 26:
this.$=API.astIncreDecre($$[$0-1],$$[$0]); tr+=$$[$0-1]+"++";
break;
case 27:
this.$=API.astIncreDecre($$[$0-1],$$[$0]); tr+=$$[$0-1]+"--";
break;
case 28: case 56: case 58: case 67: case 76:
this.$ = LERRORES.astErroresS(LERRORES.astErrorS($$[$0] , _$[$0].first_line, _$[$0].first_column, "Sintactico")); LERRORES.astPrintS(this.$);this.$="";
break;
case 29:
this.$ = API.expresionU($$[$0], OPERACION.NEGATIVO); tr+="-";
break;
case 30:
this.$ = API.nuevoValor(Number($$[$0]), TIPO.ENTERO); tr+=$$[$0];
break;
case 31:
this.$ = API.nuevoValor($$[$0], TIPO.CARACTER); tr+=$$[$0];
break;
case 32: case 33:
this.$ = API.nuevoValor($$[$0], TIPO.BOOLEANO); tr+=$$[$0];
break;
case 34:
this.$ = API.nuevoValor(Number($$[$0]), TIPO.DOUBLE); tr+=$$[$0];
break;
case 35:
this.$ = API.nuevoValor($$[$0], TIPO.STRING); tr+=$$[$0];
break;
case 36:
this.$ = API.nuevoValor($$[$0], TIPO.IDENTIFICADOR); tr+=$$[$0];
break;
case 38:
this.$ = API.expresion($$[$0-2], $$[$0], OPERACION.SUMA); tr+="+";
break;
case 39:
this.$ = API.expresion($$[$0-2], $$[$0], OPERACION.RESTA); tr+="-";
break;
case 40:
this.$ = API.expresion($$[$0-2], $$[$0], OPERACION.MULTIPLICACION);tr+="*";
break;
case 41:
this.$ = API.expresion($$[$0-2], $$[$0], OPERACION.DIVISION);tr+="/";
break;
case 42:
this.$ = API.expresion($$[$0-2], $$[$0], OPERACION.POTENCIA); tr+="^";
break;
case 43:
this.$ = API.expresion($$[$0-2], $$[$0], OPERACION.MODULO); tr+="%";
break;
case 44:
this.$=$$[$0-1]; tr+="("+$$[$0-1]+")";
break;
case 45:
this.$ = API.expresion($$[$0-2], $$[$0], OPERACION.AND);tr+="and";
break;
case 46:
this.$ = API.expresion($$[$0-2], $$[$0], OPERACION.OR);tr+="or";
break;
case 47:
this.$ = API.expresionU($$[$0], OPERACION.NOT);tr+="!";
break;
case 48:
this.$ = API.expresion($$[$0-2], $$[$0], OPERACION.NO_IGUAL);
break;
case 49:
this.$ = API.expresion($$[$0-2], $$[$0], OPERACION.MAYOR_IGUAL);
break;
case 50:
this.$ = API.expresion($$[$0-2], $$[$0], OPERACION.MENOR_IGUAL);
break;
case 51:
this.$ = API.expresion($$[$0-2], $$[$0], OPERACION.MAYOR);
break;
case 52:
this.$ = API.expresion($$[$0-2], $$[$0], OPERACION.MENOR);
break;
case 53:
this.$ = API.expresion($$[$0-2], $$[$0], OPERACION.IGUAL_IGUAL);
break;
case 55:
this.$ = API.nuevoValor($$[$0], TIPO.CARACTER); contentimpre=$$[$0];
break;
case 57:
this.$ = API.astLlamadaM($$[$0-3] , $$[$0-1]);
break;
case 59:
this.$ = API.astFuncion($$[$0-7] , $$[$0-6], $$[$0-4], $$[$0-1]);
break;
case 60:
this.$ = API.astFuncion($$[$0-6] , $$[$0-5], $$[$0-3], "vacio");
break;
case 61:
this.$ = API.astFuncion($$[$0-6] , $$[$0-5], "sin parametros", $$[$0-1]);
break;
case 62:
this.$ = API.astFuncion($$[$0-5] , $$[$0-4], "sin parametros", "vacio");
break;
case 63:
$$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 64:
this.$ = API.astListaP($$[$0]);
break;
case 65:
this.$ = LVARIABLES.astVariables(LVARIABLES.astVariabless(tipov , _$[$0-1].first_line, $$[$0], "SIN VALOR")); LVARIABLES.astPrintS(this.$);this.$=API.astParametro( $$[$0-1] , $$[$0]);
break;
case 66:
this.$=API.astParametro( "" , $$[$0]);
break;
case 70: case 74: case 75: case 100:
this.$=$$[$0-1];
break;
case 72:
this.$ = API.astBreak($$[$0-1]);
break;
case 73:
this.$ = API.astContinue($$[$0-1]);
break;
case 82:
this.$=API.astFor($$[$0-6],$$[$0-4],$$[$0-2],$$[$0]);
break;
case 83:
this.$=API.astWhile($$[$0-2],$$[$0]);
break;
case 84:
this.$=API.astDoWhile($$[$0-2],$$[$0-5]);
break;
case 85:
this.$ = API.astIfC(API.astIf($$[$0-2], $$[$0]));
break;
case 86:
this.$=API.astElseC(API.astIf($$[$0-3], $$[$0-1]),$$[$0]);
break;
case 87:
this.$ = API.astElseifC(API.astIf($$[$0-3], $$[$0-1]) , $$[$0]);
break;
case 88:
this.$ = API.astIfCompleto(API.astIf($$[$0-4], $$[$0-2]) , $$[$0-1], $$[$0]);
break;
case 89:
this.$ = API.astElse($$[$0]);
break;
case 90:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 91:
this.$ = API.astelif($$[$0]);
break;
case 92:
this.$ = API.astElseif( $$[$0-2], $$[$0]);
break;
case 93:
this.$ = API.astSwitch($$[$0-4],$$[$0-1]);
break;
case 94:
$$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 95:
this.$ = API.astCases($$[$0]);
break;
case 96:
 this.$ = API.astCase($$[$0-2],$$[$0]);
break;
case 97:
 this.$ = API.astCase($$[$0-1],"/");
break;
case 98:
this.$ = API.astDefault($$[$0]);
break;
case 99:
this.$ = API.astDefault("/");
break;
case 101:
this.$="VACIO"
break;
case 102:
this.$ = API.astReturn(TIPO.ENTERO , $$[$0]);
break;
case 103:
this.$ = API.astReturn(TIPO.ENTERO , "vacio");
break;
case 104:
this.$=API.astConsoleWrite($$[$0-1]); imprimir+=$$[$0-1]+"\n";
break;
case 105:
this.$=API.astConsoleWrite($$[$0-1]); 
break;
}
},
table: [{3:1,4:2,6:3,7:[1,4]},{1:[3]},{5:[1,5]},{5:[2,2]},{8:[1,6]},{1:[2,1]},{9:[1,7]},{2:$V0,8:$V1,10:8,12:9,13:10,15:11,16:12,17:13,18:15,21:25,22:14,25:17,26:$V2,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7},{2:$V0,8:$V1,11:[1,26],12:27,13:10,15:11,16:12,17:13,18:15,21:25,22:14,25:17,26:$V2,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7},o($V8,[2,5]),{14:[1,28]},o($V8,[2,7]),{14:[2,8]},{14:[2,9]},{8:[1,29]},{14:[2,10],19:[1,30]},{23:[1,31],32:$V9,33:$Va},o($Vb,[2,18]),{8:[2,19]},{8:[2,20]},{8:[2,21]},{8:[2,22]},{8:[2,23]},{8:[2,24]},o([8,14],[2,25]),o($Vc,[2,12]),{5:[2,3]},o($V8,[2,4]),o($V8,[2,6]),o($Vc,$Vd,{23:$Ve,46:[1,34]}),{8:[1,37],20:36},{2:$Vf,8:$Vg,24:38,25:47,34:$Vh,35:$Vi,36:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,46:$Vo,50:$Vp,57:50,58:$Vq},o($Vr,[2,26]),o($Vr,[2,27]),{2:$Vs,8:$Vg,22:56,24:57,25:47,26:$V2,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7,34:$Vh,35:$Vi,36:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,46:$Vo,47:[1,54],50:$Vp,57:50,58:$Vq,59:53,61:55},{2:$Vf,8:$Vg,24:59,25:47,34:$Vh,35:$Vi,36:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,46:$Vo,50:$Vp,57:50,58:$Vq},o($Vc,[2,11]),o($Vc,[2,16],{23:[1,60]}),o($Vb,[2,17],{34:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,48:$Vz,49:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG}),{2:$Vf,8:$Vg,24:75,25:47,34:$Vh,35:$Vi,36:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,46:$Vo,50:$Vp,57:50,58:$Vq},o($Vr,[2,30]),o($Vr,[2,31]),o($Vr,[2,32]),o($Vr,[2,33]),o($Vr,[2,34]),o($Vr,[2,35]),o($Vr,[2,36],{32:$V9,33:$Va,46:[1,76]}),o($Vr,[2,37]),{2:$Vf,8:$Vg,24:77,25:47,34:$Vh,35:$Vi,36:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,46:$Vo,50:$Vp,57:50,58:$Vq},{2:$Vf,8:$Vg,24:78,25:47,34:$Vh,35:$Vi,36:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,46:$Vo,50:$Vp,57:50,58:$Vq},o($Vr,[2,54]),o($Vr,$VH),o($Vr,[2,56]),{19:$VI,47:[1,79]},{9:[1,81]},o($VJ,[2,64]),{8:[1,82]},o($VJ,[2,66],{34:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,48:$Vz,49:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG}),o([8,19,34,41,42,43,44,45,47,48,49,51,52,53,54,55,56],[2,67]),o($Vc,[2,13],{34:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,48:$Vz,49:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG}),{2:$Vf,8:$Vg,24:83,25:47,34:$Vh,35:$Vi,36:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,46:$Vo,50:$Vp,57:50,58:$Vq},{2:$Vf,8:$Vg,24:84,25:47,34:$Vh,35:$Vi,36:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,46:$Vo,50:$Vp,57:50,58:$Vq},{2:$Vf,8:$Vg,24:85,25:47,34:$Vh,35:$Vi,36:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,46:$Vo,50:$Vp,57:50,58:$Vq},{2:$Vf,8:$Vg,24:86,25:47,34:$Vh,35:$Vi,36:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,46:$Vo,50:$Vp,57:50,58:$Vq},{2:$Vf,8:$Vg,24:87,25:47,34:$Vh,35:$Vi,36:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,46:$Vo,50:$Vp,57:50,58:$Vq},{2:$Vf,8:$Vg,24:88,25:47,34:$Vh,35:$Vi,36:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,46:$Vo,50:$Vp,57:50,58:$Vq},{2:$Vf,8:$Vg,24:89,25:47,34:$Vh,35:$Vi,36:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,46:$Vo,50:$Vp,57:50,58:$Vq},{2:$Vf,8:$Vg,24:90,25:47,34:$Vh,35:$Vi,36:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,46:$Vo,50:$Vp,57:50,58:$Vq},{2:$Vf,8:$Vg,24:91,25:47,34:$Vh,35:$Vi,36:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,46:$Vo,50:$Vp,57:50,58:$Vq},{2:$Vf,8:$Vg,24:92,25:47,34:$Vh,35:$Vi,36:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,46:$Vo,50:$Vp,57:50,58:$Vq},{2:$Vf,8:$Vg,24:93,25:47,34:$Vh,35:$Vi,36:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,46:$Vo,50:$Vp,57:50,58:$Vq},{2:$Vf,8:$Vg,24:94,25:47,34:$Vh,35:$Vi,36:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,46:$Vo,50:$Vp,57:50,58:$Vq},{2:$Vf,8:$Vg,24:95,25:47,34:$Vh,35:$Vi,36:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,46:$Vo,50:$Vp,57:50,58:$Vq},{2:$Vf,8:$Vg,24:96,25:47,34:$Vh,35:$Vi,36:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,46:$Vo,50:$Vp,57:50,58:$Vq},{2:$Vf,8:$Vg,24:97,25:47,34:$Vh,35:$Vi,36:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,46:$Vo,50:$Vp,57:50,58:$Vq},o($VK,[2,29],{54:$VE,55:$VF}),{2:$Vs,8:$Vg,22:56,24:57,25:47,26:$V2,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7,34:$Vh,35:$Vi,36:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,46:$Vo,50:$Vp,57:50,58:$Vq,59:98,61:55},{34:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,47:[1,99],48:$Vz,49:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG},o($VK,[2,47],{54:$VE,55:$VF}),{9:[1,100]},{2:$Vs,8:$Vg,22:56,24:57,25:47,26:$V2,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7,34:$Vh,35:$Vi,36:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,46:$Vo,50:$Vp,57:50,58:$Vq,61:101},{2:$VL,8:$V1,11:[1,103],13:105,16:12,17:13,18:15,21:25,22:124,25:17,26:$V2,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7,60:102,62:104,63:106,64:$VM,65:$VN,66:109,67:110,68:112,69:113,70:114,71:115,72:116,73:$VO,75:$VP,76:$VQ,77:$VR,82:$VS,88:$VT,89:$VU},o($VJ,[2,65]),o($Vc,[2,15],{34:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,48:$Vz,49:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG}),o($VV,[2,38],{42:$Vv,43:$Vw,44:$Vx,45:$Vy,54:$VE,55:$VF}),o($VV,[2,39],{42:$Vv,43:$Vw,44:$Vx,45:$Vy,54:$VE,55:$VF}),o($VW,[2,40],{44:$Vx,45:$Vy,54:$VE,55:$VF}),o($VW,[2,41],{44:$Vx,45:$Vy,54:$VE,55:$VF}),o($VK,[2,42],{54:$VE,55:$VF}),o($VK,[2,43],{54:$VE,55:$VF}),o([14,19,47,48,49,86],[2,45],{34:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG}),o([14,19,47,49,86],[2,46],{34:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,48:$Vz,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG}),o($VX,[2,48],{34:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,52:$VC,53:$VD,54:$VE,55:$VF}),o($VY,[2,49],{34:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,54:$VE,55:$VF}),o($VY,[2,50],{34:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,54:$VE,55:$VF}),o($VZ,[2,51],{34:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,48:$Vz,49:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG}),o($VZ,[2,52],{34:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,48:$Vz,49:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG}),o($VX,[2,53],{34:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,52:$VC,53:$VD,54:$VE,55:$VF}),{19:$VI,47:[1,125]},o($Vr,[2,44]),{2:$VL,8:$V1,11:[1,127],13:105,16:12,17:13,18:15,21:25,22:124,25:17,26:$V2,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7,60:126,62:104,63:106,64:$VM,65:$VN,66:109,67:110,68:112,69:113,70:114,71:115,72:116,73:$VO,75:$VP,76:$VQ,77:$VR,82:$VS,88:$VT,89:$VU},o($VJ,[2,63]),{2:$VL,8:$V1,11:[1,128],13:105,16:12,17:13,18:15,21:25,22:124,25:17,26:$V2,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7,62:129,63:106,64:$VM,65:$VN,66:109,67:110,68:112,69:113,70:114,71:115,72:116,73:$VO,75:$VP,76:$VQ,77:$VR,82:$VS,88:$VT,89:$VU},o($V8,[2,62]),o($V_,[2,69]),{14:[1,130]},o($V_,[2,71]),{14:[1,131]},{14:[1,132]},{14:[1,133]},{14:[1,134]},o([2,8,11,14,26,27,28,29,30,31,64,65,73,75,76,77,82,85,87,88,89],[2,76]),o($V_,[2,77]),o($V_,[2,78]),o($V_,[2,79]),o($V_,[2,80]),o($V_,[2,81]),{2:$Vf,8:$Vg,14:[2,103],24:135,25:47,34:$Vh,35:$Vi,36:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,46:$Vo,50:$Vp,57:50,58:$Vq},{46:[1,136]},{46:[1,137]},{46:[1,138]},{9:$V$,74:139},{46:[1,141]},{46:[1,142]},{8:[1,143]},o($Vr,[2,57]),{2:$VL,8:$V1,11:[1,144],13:105,16:12,17:13,18:15,21:25,22:124,25:17,26:$V2,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7,62:129,63:106,64:$VM,65:$VN,66:109,67:110,68:112,69:113,70:114,71:115,72:116,73:$VO,75:$VP,76:$VQ,77:$VR,82:$VS,88:$VT,89:$VU},o($V8,[2,60]),o($V8,[2,61]),o($V_,[2,68]),o($V_,[2,70]),o($V_,[2,72]),o($V_,[2,73]),o($V_,[2,74]),o($V_,[2,75]),{14:[2,102],34:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,48:$Vz,49:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG},{2:$Vf,8:$Vg,24:146,25:47,34:$Vh,35:$Vi,36:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,46:$Vo,50:$Vp,57:50,58:[1,145]},{2:$V0,8:$V1,13:147,16:12,17:13,18:15,21:25,22:124,25:17,26:$V2,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7},{2:$Vf,8:$Vg,24:148,25:47,34:$Vh,35:$Vi,36:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,46:$Vo,50:$Vp,57:50,58:$Vq},{75:[1,149]},{2:$VL,8:$V1,11:[1,151],13:105,16:12,17:13,18:15,21:25,22:124,25:17,26:$V2,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7,60:150,62:104,63:106,64:$VM,65:$VN,66:109,67:110,68:112,69:113,70:114,71:115,72:116,73:$VO,75:$VP,76:$VQ,77:$VR,82:$VS,88:$VT,89:$VU},{2:$Vf,8:$Vg,24:152,25:47,34:$Vh,35:$Vi,36:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,46:$Vo,50:$Vp,57:50,58:$Vq},{2:$Vf,8:$Vg,24:153,25:47,34:$Vh,35:$Vi,36:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,46:$Vo,50:$Vp,57:50,58:$Vq},o($Vc,$Vd,{23:$Ve}),o($V8,[2,59]),o([34,41,42,43,44,45,48,49,51,52,53,54,55,56],$VH,{47:[1,154]}),{34:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,47:[1,155],48:$Vz,49:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG},{14:[1,156]},{34:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,47:[1,157],48:$Vz,49:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG},{46:[1,158]},{2:$VL,8:$V1,11:[1,159],13:105,16:12,17:13,18:15,21:25,22:124,25:17,26:$V2,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7,62:129,63:106,64:$VM,65:$VN,66:109,67:110,68:112,69:113,70:114,71:115,72:116,73:$VO,75:$VP,76:$VQ,77:$VR,82:$VS,88:$VT,89:$VU},o($V01,[2,101]),{34:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,47:[1,160],48:$Vz,49:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG},{34:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,47:[1,161],48:$Vz,49:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG},{14:[2,104]},{14:[2,105]},{2:$Vf,8:$Vg,24:162,25:47,34:$Vh,35:$Vi,36:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,46:$Vo,50:$Vp,57:50,58:$Vq},{9:$V$,74:163},{2:$Vf,8:$Vg,24:164,25:47,34:$Vh,35:$Vi,36:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,46:$Vo,50:$Vp,57:50,58:$Vq},o($V01,[2,100]),{9:$V$,74:165},{9:[1,166]},{14:[1,167],34:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,48:$Vz,49:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG},o($V_,[2,83]),{34:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,47:[1,168],48:$Vz,49:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG},o($V_,[2,85],{78:169,79:170,81:172,80:$V11}),{83:173,84:174,85:$V21,87:$V31},{2:[1,178],8:$V1,17:177,25:17},{14:[1,179]},o($V_,[2,86]),o($V_,[2,87],{78:180,81:181,80:$V11}),{9:$V$,74:182,77:[1,183]},o($V01,[2,91]),{11:[1,184],84:185,85:$V21,87:$V31},o($V41,[2,95]),{2:$Vf,8:$Vg,24:186,25:47,34:$Vh,35:$Vi,36:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,46:$Vo,50:$Vp,57:50,58:$Vq},{86:[1,187]},{47:[1,188]},{47:[2,28]},o($V_,[2,84]),o($V_,[2,88]),o($V01,[2,90]),o($V_,[2,89]),{46:[1,189]},o($V_,[2,93]),o($V41,[2,94]),{34:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,48:$Vz,49:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,86:[1,190]},o($V41,[2,99],{16:12,17:13,18:15,25:17,21:25,62:104,13:105,63:106,66:109,67:110,68:112,69:113,70:114,71:115,72:116,22:124,60:191,2:$VL,8:$V1,26:$V2,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7,64:$VM,65:$VN,73:$VO,75:$VP,76:$VQ,77:$VR,82:$VS,88:$VT,89:$VU}),{9:$V$,74:192},{2:$Vf,8:$Vg,24:193,25:47,34:$Vh,35:$Vi,36:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,46:$Vo,50:$Vp,57:50,58:$Vq},o($V41,[2,97],{16:12,17:13,18:15,25:17,21:25,62:104,13:105,63:106,66:109,67:110,68:112,69:113,70:114,71:115,72:116,22:124,60:194,2:$VL,8:$V1,26:$V2,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7,64:$VM,65:$VN,73:$VO,75:$VP,76:$VQ,77:$VR,82:$VS,88:$VT,89:$VU}),o($V41,[2,98],{16:12,17:13,18:15,25:17,21:25,13:105,63:106,66:109,67:110,68:112,69:113,70:114,71:115,72:116,22:124,62:129,2:$VL,8:$V1,26:$V2,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7,64:$VM,65:$VN,73:$VO,75:$VP,76:$VQ,77:$VR,82:$VS,88:$VT,89:$VU}),o($V_,[2,82]),{34:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,47:[1,195],48:$Vz,49:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG},o($V41,[2,96],{16:12,17:13,18:15,25:17,21:25,13:105,63:106,66:109,67:110,68:112,69:113,70:114,71:115,72:116,22:124,62:129,2:$VL,8:$V1,26:$V2,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7,64:$VM,65:$VN,73:$VO,75:$VP,76:$VQ,77:$VR,82:$VS,88:$VT,89:$VU}),{9:$V$,74:196},o($V01,[2,92])],
defaultActions: {3:[2,2],5:[2,1],12:[2,8],13:[2,9],18:[2,19],19:[2,20],20:[2,21],21:[2,22],22:[2,23],23:[2,24],26:[2,3],154:[2,104],155:[2,105],178:[2,28]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	const OPERACION	= require('./ast').OPERACION;
	const TIPO 		= require('./ast').TIPO;
	const API	= require('./ast').API;
	const LERRORES	= require('./ast').LERRORES;
    const LVARIABLES =require('./ast').LVariables;
    var tr = "";
    var imprimir = "";
    var tipov="";
    var contentimpre="";
    if(imprimir==""){

    }else{
        imprimir=""
    }
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
	const LERRORES	= require('./ast').LERRORES;

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 30;
break;
case 4:return 26;
break;
case 5:return 29;
break;
case 6:return 28;
break;
case 7:return 27;
break;
case 8:return 76;
break;
case 9:return 75;
break;
case 10:return 77;
break;
case 11:return 80;
break;
case 12:return 73;
break;
case 13:return 82;
break;
case 14:return 85;
break;
case 15:return 87;
break;
case 16:return 64;
break;
case 17:return 65;
break;
case 18:return 88;
break;
case 19:return 31;
break;
case 20:return 37;
break;
case 21:return 38;
break;
case 22:return 89;
break;
case 23:return 7
break;
case 24:return 86;
break;
case 25:return 14;
break;
case 26:return 9;
break;
case 27:return 11;
break;
case 28:return 46;
break;
case 29:return 47;
break;
case 30:return 19;
break;
case 31:return 48
break;
case 32:return 49;
break;
case 33:return 50;
break;
case 34:return 32;
break;
case 35:return 33;
break;
case 36:return 41;
break;
case 37:return 34;
break;
case 38:return 42;
break;
case 39:return 43;
break;
case 40:return 44;
break;
case 41:return 45;
break;
case 42:return 53;
break;
case 43:return 52;
break;
case 44:return 56;
break;
case 45:return 51;
break;
case 46:return 55;
break;
case 47:return 54;
break;
case 48:return 23;
break;
case 49: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 40; 
break;
case 50: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 58; 
break;
case 51:return 39;
break;
case 52:return 35;
break;
case 53:return 36;
break;
case 54:return 8;
break;
case 55:return 5;
break;
case 56: $$ = LERRORES.astErrores(LERRORES.astError(yy_.yytext , yy_.yylloc.first_line , yy_.yylloc.first_column, "Lexico")); LERRORES.astPrint($$);$$="";
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/i,/^(?:String\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:bool\b)/i,/^(?:char\b)/i,/^(?:do\b)/i,/^(?:while\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:for\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:Console\.Write\b)/i,/^(?:class\b)/i,/^(?::)/i,/^(?:;)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\()/i,/^(?:\))/i,/^(?:,)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:=)/i,/^(?:"[^\"]*")/i,/^(?:'[^\']*')/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:[0-9]+\b)/i,/^(?:'[.]?')/i,/^(?:(_?[a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = g;
exports.Parser = g.Parser;
exports.parse = function () { return g.parse.apply(g, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}